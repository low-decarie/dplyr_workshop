{
    "collab_server" : "",
    "contents" : "<style>\n.reveal section code {\n  font-size: 1em;\n}\n</style>\n\ndplyr\n========================================================\nauthor: Etienne Low-Décarie\ntransition: fade\n\ndplyr and plyr\n===\n\n```{r fig.width=6, fig.height=4,echo=FALSE}\nrequire(png)\nrequire(grid)\nimg <- readPNG(\"./dplyr-figure/plyr.png\")\n grid.raster(img)\n```\n\n\n\nSplit-Apply-Combine\n===\n\n- Equivalent\n  - SQL GROUP BY\n  - Pivot Tables (Excel, SPSS, …)\n  \n![split](./dplyr-figure/split_apply_combine.png)\n\n***\n  \n- Split\n  - Define a subset of your data\n- Apply\n  - Do anything to this subset \n    - calculation, modeling, simulations, plotting\n- Combine\n\n- Repeat this for all subsets\n  - collect the results\n  \n\nHistory and use\n===\n\n- plyr\n  - any input, any output\n      - to load a list of files\n      - to produce plots\n  - slow and complicated\n\n***\n\n- dplyr\n  - data.frame in/data.frame out\n  - faster\n  - Details:\n   - introducing chaining to R\n   - remote database integration\n    \n    \nConflict between plyr and dplyr\n===\n\n`plyr` and `dplyr` do not play nice together  \nAlways load `dplyr` last  \nBe careful of packages that load `plyr` \n\n```{r fig.width=3, fig.height=3,echo=T}\nrequire(plyr)\nrequire(dplyr)\n```\n\nyou can also use `dplyr:::` to ensure functions are called from dplyr  \n\n[issue](https://github.com/hadley/dplyr/issues/347)\n\ndplyr    \n===\n\nVignette\n[https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)\n\nCheatsheet\n[https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n\nGrouping\n===\n\n**Split** -Apply-Combine\n\n- `group_by()`\n\nGroup data\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nif(!require(dplyr)){install.packages(\"dplyr\")}\nrequire(dplyr)\nCO2_by_Plant_Type_Treatment <- group_by(CO2,\n                                        Plant,\n                                        Type,\n                                        Treatment)\n```\n\n\ngroup data\n===\n\n`group_by` implies `tbl_df`\n`tbl_df` wraps a `data.frame`\n```{r fig.width=3, fig.height=3,echo=T}\nprint(CO2_by_Plant_Type_Treatment)\nclass(CO2_by_Plant_Type_Treatment)\n```\n\ngroup data\n===\n\n**Caution when working with functions that expect a `data.frame`**\n\n```{r fig.width=3, fig.height=3,echo=T}\nclass(CO2_by_Plant_Type_Treatment)\nhead(as.data.frame(CO2_by_Plant_Type_Treatment))\n```\n\n\n\nApply verbes\n===\nclass: small-code\n\nSplit-**Apply-Combine**\n\n- `mutate`\n\n\n```{r fig.width=3, fig.height=2,echo=FALSE}\nrequire(png)\nrequire(grid)\nimg <- readPNG(\"./dplyr-figure/mutate_table.png\")\n grid.raster(img)\n```\n\n- `summarise`\n\n\n```{r fig.width=3, fig.height=2,echo=FALSE}\nrequire(png)\nrequire(grid)\nimg <- readPNG(\"./dplyr-figure/summary_table.png\")\n grid.raster(img)\n```\n\n\nSummarize grouped data\n===\nclass: small-code\n\nSummarize by extracting maximum uptake per plant\n\n```{r fig.width=3, fig.height=3,echo=T}\n \nCO2_max_per_plant <- dplyr:::summarise(CO2_by_Plant_Type_Treatment,\n                               max_uptake=max(uptake))\nprint(CO2_max_per_plant)\n```\n\n\nPlot summarized data\n===\nleft: 75%\n\n```{r fig.width=4, fig.height=4,echo=F}\n if(!require(ggplot2)){install.packages(\"ggplot2\")}\nrequire(ggplot2)\n```\n \n```{r fig.width=3, fig.height=3,echo=T}\ndodge <- position_dodge(1)\n\np <- ggplot(data=CO2_max_per_plant,\n           aes(x=Type,\n           y=max_uptake,\n           fill=Treatment))+\n           geom_bar(stat=\"summary\",\n           fun.y=mean,\n           position=dodge)+\n  stat_summary(fun.data=\"mean_cl_normal\", \n               geom=\"errorbar\",\n               position=dodge)\n```\n\n***\n\n\n```{r fig.width=3, fig.height=3,echo=F}\nprint(p)\n```\n\n\nCreate a beautiful table of summarized data\n===\n\n```{r fig.width=6, fig.height=3,echo=T}\nif(!require(gridExtra)){install.packages(\"gridExtra\")}\nrequire(gridExtra)\ngrid.newpage()\ngrid.table(head(data.frame(CO2_max_per_plant)))\n```\n\nExercise 1\n===\n\n- Calculate the mean for each species value for each dimension of sepals and petals in the `iris` data set\n- Produce an elegant table\n\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown1 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\n\ndplyr mutate data\n===\n\nCalculate deviation from the mean uptake for each plant\n\n```{r fig.width=3, fig.height=3,echo=T}\n\nCO2_with_deviation <- mutate(CO2_by_Plant_Type_Treatment,\n                               deviation_from_mean=uptake-mean(uptake))\n```\n\nPlot mutated data\n===\n\n```{r fig.width=6, fig.height=3,echo=T}\nCO2.plot <- qplot(data = CO2_with_deviation,\n                  x = conc,\n                  y = deviation_from_mean,\n                  colour = Treatment) + \n  facet_grid(.~Type)+\n  geom_line(aes(group = Plant))\nprint(CO2.plot)\n```\n\n\n\nWriting your own functions\n===\n\nCalculate the slope and intercept for each plant\n\n```{r fig.width=3, fig.height=3,echo=T}\nintercept_slope <- function(conc, uptake){\n  fit <- lm(uptake~conc)\n  coefficients <- coef(fit)\n  return(data.frame(intercept=coefficients[1],\n                    slope=coefficients[2]))\n}\n```\n\nnote: there is now a better way to do this using require(broom)\n\nUsing your new function with dplyr\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nCO2_fit <- summarise(CO2_by_Plant_Type_Treatment,\n                     intercept=intercept_slope(conc, uptake)$intercept,\n                     slope=intercept_slope(conc, uptake)$slope)\n```\n\nPlot the results of your new function\n===\nclass: small-code\n\n```{r fig.width=3, fig.height=3,echo=T}\ndodge <- position_dodge(1)\np <- ggplot(data=CO2_fit,aes(x=Type,\n           y=slope,\n           fill=Treatment))+\n           geom_bar(stat=\"summary\",\n           fun.y=mean,\n           position=dodge)+\n  stat_summary(fun.data=\"mean_cl_normal\", \n               geom=\"errorbar\",\n               position=dodge)\n```\n\n***\n\n```{r fig.width=3, fig.height=3,echo=F}\nprint(p)\n```\n\n\n\nExercise 2\n===\n\n- Use the exercise_data_temp_par.csv file\n- Calculate the deviations from the annual means  \n- Calculate the annual absolute integrated anomaly\n\n\n$$\n\\sum_{i=January}^{i=December}\\left\\lvert x_i- \\bar x _{i2002-2014} \\right\\rvert\n$$\n\n\nChaining operations\n===\n\n\n`%>%`  allows you to apply multiple functions sequentially  \n(equivalent to \"|\" in bash)\n\n```{r fig.width=3, fig.height=3}\nCO2_by_Plant_Type_Treatment <- group_by(CO2,\n                                        Plant,\n                                        Type,\n                                        Treatment)\nCO2_max_per_plant <- summarise(CO2_by_Plant_Type_Treatment,\n                               max_uptake=max(uptake))\n```\n\nbecomes\n\n```{r fig.width=3, fig.height=3}\nCO2_max_per_plant <-CO2 %>%\n                      group_by(Plant,\n                                Type,\n                                Treatment)  %>%\n                      summarise(max_uptake=max(uptake)) \n```\n\n\nDo\n===\n\n`do` is like `mutate` or `summarise`, but returns a list of any `R` objects\n\n```{r fig.width=3, fig.height=3}\n\nCO2_fit <- CO2_by_Plant_Type_Treatment %>%\n          do(model=lm(uptake~conc, data=.))\n\n```\n\n\ndo and broom\n===\n\n\n```{r fig.width=3, fig.height=3}\nrequire(broom)\nCO2_fit <- CO2_by_Plant_Type_Treatment %>%\n          do(tidy(lm(uptake~conc, data=.)))\n\n```\n\nExercise 3\n===\n\n- convert code from previous exercises (1 & 2) using `%>%` chaining\n  -convert the `summarise` of the iris data set\n  -convert the `mutate` of the monthly temperature\n\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown1 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\n\nSplit verbes\n===\n\n- `filter`\n```{r eval=F}\nfilter(iris, Sepal.Width==3)\n \nmtcars[iris$Sepal.Width == 3,]\n```\n\n- `select`\n```{r eval=F}\nselect(iris, Species)\niris[,\"Species\"]\n```\n\n```{r eval=F}\nselect(iris, starts_with(\"Petal\"))\n```\n\n\ndplyr database\n===\n\nhttps://cran.rstudio.com/web/packages/dplyr/vignettes/databases.html\n\ncreate a database\n```{r eval=F}\nmy_db <- src_sqlite(\"my_db.sqlite3\", create = T)\n```\n\ndplyr database\n===\n\nload data into the database\n```{r eval=F}\nCO2_sqlite <- copy_to(my_db,\n                      CO2, \n                      temporary = FALSE,\n                      indexes = list(\"Plant\",\n                                     \"Type\",\n                                     \"Treatment\",\n                                     \"conc\",\n                                     \"uptake\"))\n```\n\ndplyr database\n===\n\nuse the tables from a database as a regular data.frame\n\n```{r eval=F}\nCO2_max_per_plant <-CO2_sqlite %>%\n                      group_by(Plant,\n                                Type,\n                                Treatment)  %>%\n                      summarise(max_uptake=max(uptake)) \n```\n\ndplyr database\n===\n\nnote that `dplyr` will only execute database calls when needed  \n(when manipulated is being called eg. by `print()`)\n\n\nplyr\n===\n\n- Load list of files\n- Produce large number of complex plots\n\n\n\n`do` for data exploration\n===\n\nSeperate string variable and spreading  (reminder)\n\n```{r fig.width=3, fig.height=3,echo=T}\nrequire(tidyr)\n\niris$specimen <- 1:nrow(iris)\n\nlong_iris<-gather(iris,\"Measurement\",\n                  \"Value\",\n                  Sepal.Length:Petal.Width)\n\nseperated_iris <- separate(long_iris,\n                      Measurement, \n                      c(\"Organ\", \"Dimension\"))\n\nwide_iris <- spread(seperated_iris,\n                    Dimension,\n                    Value)\n```\n\n\n`do` for data exploration\n===\n\n```{r fig.width=3, fig.height=3,echo=T, eval=F}\nlist_plots <- wide_iris %>% group_by(Species) %>%\n      do(print(qplot(data=.,\n                    ymin=I(0),\n                    ymax=Length,\n                    xmin=I(0),\n                    xmax=Width,\n                    xlim=c(0,10),\n                    ylim=c(0,10),\n                    geom=\"rect\",\n                    facets=~specimen,\n                    alpha=I(0.3),\n                    fill=Organ)))\n\n\n```\n\nplyr\n===\n\n`_input_output_ply` functions:\n\n`ddply`: data.frame in, data.frame out\ncan be done in dplyr\n\n`ldply`: list in, data.frame out\n\n\nplyr\n===\n\n```{r fig.width=3, fig.height=3,eval=F}\n__ply(.data, \n      .variables,\n      .fun = NULL,\n      .progress = \"text\",\n      .parallel = FALSE,\n      .paropts = NULL)\n```\n\n\n`ldply` for file list loading\n===\n\nHow to load and merge into a single data frame\nall files in a directory\n\n```{r fig.width=3, fig.height=3,eval=F}\n\nfile_list <- list.files(\"./Data/\",\n                        \".txt\")\n\npath_list <- paste0(\"./Data/\",\n                    file_list)\n\nloaded_data <- ldply(.data=path_list,\n                     function(x){\n                       loaded_data <- read.csv(x)\n                       loaded_data$path <- x\n                       return(loaded_data)\n                     }\n                        \n```\n\nExercise 4\n===\n\n- load all files in `temperature_timeseries` using `ldply()`\n- Calculate the annual absolute integrated anomaly for each site (`mutate`)\n- Plot the annual absolute integrated anomaly for each site (`qplot`)\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown1 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\n\n\n\n\nFeedback\n===\n\n[Feedback form](http://goo.gl/forms/3mH1UC0fH3)\nhttp://goo.gl/forms/3mH1UC0fH3",
    "created" : 1494186324104.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3805826855",
    "id" : "DD8C1B62",
    "lastKnownWriteTime" : 1494186690,
    "last_content_update" : 1494186690239,
    "path" : "~/Documents/R/dplyr_workshop/dplyr.Rpres",
    "project_path" : "dplyr.Rpres",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}