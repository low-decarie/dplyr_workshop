<style>
.reveal section code {
  font-size: 1em;
}
</style>

dplyr (simplified)
========================================================
author: Etienne Low-Décarie
transition: fade

January 5, 2017

Presentation: https://low-decarie.github.io/dplyr_workshop/#/
code: https://github.com/low-decarie/dplyr_workshop/tree/simplified_for_intro_to_r


Split-Apply-Combine
===

- Equivalent
  - SQL GROUP BY
  - Pivot Tables (Excel, SPSS, …)
  
![split](./dplyr-figure/split_apply_combine.png)

***
  
- Split
  - Define a subset of your data
- Apply
  - Do anything to this subset 
    - calculation, modeling, simulations, plotting
- Combine

- Repeat this for all subsets
  - collect the results
  


dplyr    
===

Cheatsheet
[https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)

install
===

```{r fig.width=3, fig.height=3,echo=T}
if(!require(dplyr)){install.packages("dplyr")}
require(dplyr)

```

Grouping
===

**Split** -Apply-Combine

```{r fig.width=3, fig.height=3,eval=F}
group_by(data,
         grouping_variable_1,
         grouping_variable_2)

```

Group data
===

```{r fig.width=3, fig.height=3,echo=T}
CO2_grouped <- group_by(CO2,
                           Plant,
                           Type,
                           Treatment)
```


group data
===

`group_by` implies `tbl_df`
`tbl_df` wraps a `data.frame`
```{r fig.width=3, fig.height=3,echo=T}
print(CO2_grouped)
class(CO2_grouped)
```

group data
===

**Caution when working with functions that expect a `data.frame`**

```{r fig.width=3, fig.height=3,echo=T}
class(CO2_grouped)
head(as.data.frame(CO2_grouped))
```



Apply verbes
===
class: small-code

Split-**Apply-Combine**

- `mutate`


```{r fig.width=3, fig.height=2,echo=FALSE}
require(png)
require(grid)
img <- readPNG("./dplyr-figure/mutate_table.png")
 grid.raster(img)
```

- `summarise`


```{r fig.width=3, fig.height=2,echo=FALSE}
require(png)
require(grid)
img <- readPNG("./dplyr-figure/summary_table.png")
 grid.raster(img)
```


Summarize grouped data
===
class: small-code

Summarize by extracting maximum uptake per plant

```{r fig.width=3, fig.height=3,echo=T}
 
CO2_max_per_plant <- dplyr:::summarise(CO2_grouped,
                               max_uptake=max(uptake))
print(CO2_max_per_plant)
```


Plot summarized data
===
left: 75%

```{r fig.width=4, fig.height=4,echo=F}
 if(!require(ggplot2)){install.packages("ggplot2")}
require(ggplot2)
```
 
```{r fig.width=3, fig.height=3,echo=T}
dodge <- position_dodge(1)

p <- ggplot(data=CO2_max_per_plant,
           aes(x=Type,
           y=max_uptake,
           fill=Treatment))+
           geom_bar(stat="summary",
           fun.y=mean,
           position=dodge)+
  stat_summary(fun.data="mean_cl_normal", 
               geom="errorbar",
               position=dodge)
```

***


```{r fig.width=3, fig.height=3,echo=F}
print(p)
```



Exercise 1
===

- Calculate the mean for each species value for each dimension of sepals and petals in the `iris` data set


<div class="centered">

<script src="countdown.js" type="text/javascript"></script>
<script type="application/javascript">
var myCountdown1 = new Countdown({
    							time: 300, 
									width:150, 
									height:80, 
									rangeHi:"minute"	// <- no comma on last item!
									});

</script>

</div>


dplyr mutate data
===

Calculate deviation from the mean uptake for each plant

```{r fig.width=3, fig.height=3,echo=T}

CO2_with_deviation <- mutate(CO2_grouped,
                               deviation_from_mean=uptake-mean(uptake))
```

Plot mutated data
===

```{r fig.width=6, fig.height=3,echo=T}
CO2.plot <- qplot(data = CO2_with_deviation,
                  x = conc,
                  y = deviation_from_mean,
                  colour = Treatment) + 
  facet_grid(.~Type)+
  geom_line(aes(group = Plant))
print(CO2.plot)
```



Writing your own functions
===

Calculate the slope and intercept for each plant

```{r fig.width=3, fig.height=3,echo=T}
intercept_slope <- function(conc, uptake){
  fit <- lm(uptake~conc)
  coefficients <- coef(fit)
  return(data.frame(intercept=coefficients[1],
                    slope=coefficients[2]))
}
```

note: there is now a better way to do this using require(broom)

Using your new function with dplyr
===

```{r fig.width=3, fig.height=3,echo=T}
CO2_fit <- summarise(CO2_grouped,
                     intercept=intercept_slope(conc, uptake)$intercept,
                     slope=intercept_slope(conc, uptake)$slope)
```

Plot the results of your new function
===
class: small-code

```{r fig.width=3, fig.height=3,echo=T}
dodge <- position_dodge(1)
p <- ggplot(data=CO2_fit,aes(x=Type,
           y=slope,
           fill=Treatment))+
           geom_bar(stat="summary",
           fun.y=mean,
           position=dodge)+
  stat_summary(fun.data="mean_cl_normal", 
               geom="errorbar",
               position=dodge)
```

***

```{r fig.width=3, fig.height=3,echo=F}
print(p)
```



Exercise 2
===

- Use the exercise_data_temp_par.csv file
- Calculate the deviations from the annual means  
- Calculate the annual absolute integrated anomaly


$$
\sum_{i=January}^{i=December}\left\lvert x_i- \bar x _{i2002-2014} \right\rvert
$$


Chaining operations
===


`%>%`  allows you to apply multiple functions sequentially  
(equivalent to "|" in bash)

```{r fig.width=3, fig.height=3}
CO2_grouped <- group_by(CO2,
                                        Plant,
                                        Type,
                                        Treatment)
CO2_max_per_plant <- summarise(CO2_grouped,
                               max_uptake=max(uptake))
```

becomes

```{r fig.width=3, fig.height=3}
CO2_max_per_plant <-CO2 %>%
                      group_by(Plant,
                                Type,
                                Treatment)  %>%
                      summarise(max_uptake=max(uptake)) 
```




Exercise 3
===

- convert code from previous exercises (1 & 2) using `%>%` chaining
  -convert the `summarise` of the iris data set
  -convert the `mutate` of the monthly temperature


<div class="centered">

<script src="countdown.js" type="text/javascript"></script>
<script type="application/javascript">
var myCountdown1 = new Countdown({
    							time: 300, 
									width:150, 
									height:80, 
									rangeHi:"minute"	// <- no comma on last item!
									});

</script>

</div>


dplyr database
===

dplyr can do most calculations in the database

note that `dplyr` will only execute database calls when needed  
(when manipulated is being called eg. by `print()`)




Exercise 4
===

- load all files in `temperature_timeseries` using `ldply()`
- Calculate the annual absolute integrated anomaly for each site (`mutate`)
- Plot the annual absolute integrated anomaly for each site (`qplot`)

<div class="centered">

<script src="countdown.js" type="text/javascript"></script>
<script type="application/javascript">
var myCountdown1 = new Countdown({
    							time: 300, 
									width:150, 
									height:80, 
									rangeHi:"minute"	// <- no comma on last item!
									});

</script>

</div>





Feedback
===

[Feedback form](https://goo.gl/forms/1eCOYxMYKuzDfTu62)
http://goo.gl/forms/3mH1UC0fH3