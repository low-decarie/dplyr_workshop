<style>
.reveal section code {
  font-size: 1em;
}
</style>

dplyr
========================================================
author: Etienne Low-Décarie
transition: fade

dplyr and plyr
===

```{r fig.width=6, fig.height=4,echo=FALSE}
require(png)
require(grid)
img <- readPNG("./dplyr-figure/plyr.png")
 grid.raster(img)
```



Split-Apply-Combine
===

- Equivalent
  - SQL GROUP BY
  - Pivot Tables (Excel, SPSS, …)
  
![split](./dplyr-figure/split_apply_combine.png)

***
  
- Split
  - Define a subset of your data
- Apply
  - Do anything to this subset 
    - calculation, modeling, simulations, plotting
- Combine

- Repeat this for all subsets
  - collect the results
  

History and use
===

- plyr
  - any input, any output
      - to load a list of files
      - to produce plots
  - slow and complicated

***

- dplyr
  - data.frame in/data.frame out
  - faster
  - Details:
   - introducing chaining to R
   - remote database integration
    
    
Conflict between plyr and dplyr
===

`plyr` and `dplyr` do not play nice together  
Always load `dplyr` last  
Be careful of packages that load `plyr` 

```{r fig.width=3, fig.height=3,echo=T}
require(plyr)
require(dplyr)
```

you can also use `dplyr:::` to ensure functions are called from dplyr  

[issue](https://github.com/hadley/dplyr/issues/347)

dplyr    
===

Vignette
[https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)

Cheatsheet
[https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)

Grouping
===

**Split** -Apply-Combine

- `group_by()`

Group data
===

```{r fig.width=3, fig.height=3,echo=T}
if(!require(dplyr)){install.packages("dplyr")}
require(dplyr)
CO2_by_Plant_Type_Treatment <- group_by(CO2,
                                        Plant,
                                        Type,
                                        Treatment)
```


group data
===

`group_by` implies `tbl_df`
`tbl_df` wraps a `data.frame`
```{r fig.width=3, fig.height=3,echo=T}
print(CO2_by_Plant_Type_Treatment)
class(CO2_by_Plant_Type_Treatment)
```

group data
===

**Caution when working with functions that expect a `data.frame`**

```{r fig.width=3, fig.height=3,echo=T}
class(CO2_by_Plant_Type_Treatment)
head(as.data.frame(CO2_by_Plant_Type_Treatment))
```



Apply verbes
===
class: small-code

Split-**Apply-Combine**

- `mutate`


```{r fig.width=3, fig.height=2,echo=FALSE}
require(png)
require(grid)
img <- readPNG("./dplyr-figure/mutate_table.png")
 grid.raster(img)
```

- `summarise`


```{r fig.width=3, fig.height=2,echo=FALSE}
require(png)
require(grid)
img <- readPNG("./dplyr-figure/summary_table.png")
 grid.raster(img)
```


Summarize grouped data
===
class: small-code

Summarize by extracting maximum uptake per plant

```{r fig.width=3, fig.height=3,echo=T}
 
CO2_max_per_plant <- dplyr:::summarise(CO2_by_Plant_Type_Treatment,
                               max_uptake=max(uptake))
print(CO2_max_per_plant)
```


Plot summarized data
===
left: 75%

```{r fig.width=4, fig.height=4,echo=F}
 if(!require(ggplot2)){install.packages("ggplot2")}
require(ggplot2)
```
 
```{r fig.width=3, fig.height=3,echo=T}
dodge <- position_dodge(1)

p <- ggplot(data=CO2_max_per_plant,
           aes(x=Type,
           y=max_uptake,
           fill=Treatment))+
           geom_bar(stat="summary",
           fun.y=mean,
           position=dodge)+
  stat_summary(fun.data="mean_cl_normal", 
               geom="errorbar",
               position=dodge)
```

***


```{r fig.width=3, fig.height=3,echo=F}
print(p)
```


Create a beautiful table of summarized data
===

```{r fig.width=6, fig.height=3,echo=T}
if(!require(gridExtra)){install.packages("gridExtra")}
require(gridExtra)
grid.newpage()
grid.table(head(data.frame(CO2_max_per_plant)))
```

Exercise 1
===

- Calculate the mean for each species value for each dimension of sepals and petals in the `iris` data set
- Produce an elegant table


<div class="centered">

<script src="countdown.js" type="text/javascript"></script>
<script type="application/javascript">
var myCountdown1 = new Countdown({
    							time: 300, 
									width:150, 
									height:80, 
									rangeHi:"minute"	// <- no comma on last item!
									});

</script>

</div>


dplyr mutate data
===

Calculate deviation from the mean uptake for each plant

```{r fig.width=3, fig.height=3,echo=T}

CO2_with_deviation <- mutate(CO2_by_Plant_Type_Treatment,
                               deviation_from_mean=uptake-mean(uptake))
```

Plot mutated data
===

```{r fig.width=6, fig.height=3,echo=T}
CO2.plot <- qplot(data = CO2_with_deviation,
                  x = conc,
                  y = deviation_from_mean,
                  colour = Treatment) + 
  facet_grid(.~Type)+
  geom_line(aes(group = Plant))
print(CO2.plot)
```



Writing your own functions
===

Calculate the slope and intercept for each plant

```{r fig.width=3, fig.height=3,echo=T}
intercept_slope <- function(conc, uptake){
  fit <- lm(uptake~conc)
  coefficients <- coef(fit)
  return(data.frame(intercept=coefficients[1],
                    slope=coefficients[2]))
}
```

note: there is now a better way to do this using require(broom)

Using your new function with dplyr
===

```{r fig.width=3, fig.height=3,echo=T}
CO2_fit <- summarise(CO2_by_Plant_Type_Treatment,
                     intercept=intercept_slope(conc, uptake)$intercept,
                     slope=intercept_slope(conc, uptake)$slope)
```

Plot the results of your new function
===
class: small-code

```{r fig.width=3, fig.height=3,echo=T}
dodge <- position_dodge(1)
p <- ggplot(data=CO2_fit,aes(x=Type,
           y=slope,
           fill=Treatment))+
           geom_bar(stat="summary",
           fun.y=mean,
           position=dodge)+
  stat_summary(fun.data="mean_cl_normal", 
               geom="errorbar",
               position=dodge)
```

***

```{r fig.width=3, fig.height=3,echo=F}
print(p)
```



Exercise 2
===

- Use the exercise_data_temp_par.csv file
- Calculate the deviations from the annual means  
- Calculate the annual absolute integrated anomaly


$$
\sum_{i=January}^{i=December}\left\lvert x_i- \bar x _{i2002-2014} \right\rvert
$$


Chaining operations
===


`%>%`  allows you to apply multiple functions sequentially  
(equivalent to "|" in bash)

```{r fig.width=3, fig.height=3}
CO2_by_Plant_Type_Treatment <- group_by(CO2,
                                        Plant,
                                        Type,
                                        Treatment)
CO2_max_per_plant <- summarise(CO2_by_Plant_Type_Treatment,
                               max_uptake=max(uptake))
```

becomes

```{r fig.width=3, fig.height=3}
CO2_max_per_plant <-CO2 %>%
                      group_by(Plant,
                                Type,
                                Treatment)  %>%
                      summarise(max_uptake=max(uptake)) 
```


Do
===

`do` is like `mutate` or `summarise`, but returns a list of any `R` objects

```{r fig.width=3, fig.height=3}

CO2_fit <- CO2_by_Plant_Type_Treatment %>%
          do(model=lm(uptake~conc, data=.))

```


do and broom
===


```{r fig.width=3, fig.height=3}
require(broom)
CO2_fit <- CO2_by_Plant_Type_Treatment %>%
          do(tidy(lm(uptake~conc, data=.)))

```

Exercise 3
===

- convert code from previous exercises (1 & 2) using `%>%` chaining
  -convert the `summarise` of the iris data set
  -convert the `mutate` of the monthly temperature


<div class="centered">

<script src="countdown.js" type="text/javascript"></script>
<script type="application/javascript">
var myCountdown1 = new Countdown({
    							time: 300, 
									width:150, 
									height:80, 
									rangeHi:"minute"	// <- no comma on last item!
									});

</script>

</div>


Split verbes
===

- `filter`
```{r eval=F}
filter(iris, Sepal.Width==3)
 
mtcars[iris$Sepal.Width == 3,]
```

- `select`
```{r eval=F}
select(iris, Species)
iris[,"Species"]
```

```{r eval=F}
select(iris, starts_with("Petal"))
```


dplyr database
===

https://cran.rstudio.com/web/packages/dplyr/vignettes/databases.html

create a database
```{r}
my_db <- src_sqlite("my_db.sqlite3", create = T)
```

dplyr database
===

load data into the database
```{r eval=F}
CO2_sqlite <- copy_to(my_db,
                      CO2, 
                      temporary = FALSE,
                      indexes = list("Plant",
                                     "Type",
                                     "Treatment",
                                     "conc",
                                     "uptake"))
```

dplyr database
===

use the tables from a database as a regular data.frame

```{r eval=F}
CO2_max_per_plant <-CO2_sqlite %>%
                      group_by(Plant,
                                Type,
                                Treatment)  %>%
                      summarise(max_uptake=max(uptake)) 
```

dplyr database
===

note that `dplyr` will only execute database calls when needed  
(when manipulated is being called eg. by `print()`)


plyr
===

- Load list of files
- Produce large number of complex plots



`do` for data exploration
===

Seperate string variable and spreading  (reminder)

```{r fig.width=3, fig.height=3,echo=T}
require(tidyr)

iris$specimen <- 1:nrow(iris)

long_iris<-gather(iris,"Measurement",
                  "Value",
                  Sepal.Length:Petal.Width)

seperated_iris <- separate(long_iris,
                      Measurement, 
                      c("Organ", "Dimension"))

wide_iris <- spread(seperated_iris,
                    Dimension,
                    Value)
```


`do` for data exploration
===

```{r fig.width=3, fig.height=3,echo=T, eval=F}
list_plots <- wide_iris %>% group_by(Species) %>%
      do(print(qplot(data=.,
                    ymin=I(0),
                    ymax=Length,
                    xmin=I(0),
                    xmax=Width,
                    xlim=c(0,10),
                    ylim=c(0,10),
                    geom="rect",
                    facets=~specimen,
                    alpha=I(0.3),
                    fill=Organ)))


```

plyr
===

`_input_output_ply` functions:

`ddply`: data.frame in, data.frame out
can be done in dplyr

`ldply`: list in, data.frame out


plyr
===

```{r fig.width=3, fig.height=3,eval=F}
__ply(.data, 
      .variables,
      .fun = NULL,
      .progress = "text",
      .parallel = FALSE,
      .paropts = NULL)
```


`ldply` for file list loading
===

How to load and merge into a single data frame
all files in a directory

```{r fig.width=3, fig.height=3,eval=F}

file_list <- list.files("./Data/",
                        ".txt")

path_list <- paste0("./Data/",
                    file_list)

loaded_data <- ldply(.data=path_list,
                     function(x){
                       loaded_data <- read.csv(x)
                       loaded_data$path <- x
                       return(loaded_data)
                     }
                        
```

Exercise 4
===

- load all files in `temperature_timeseries` using `ldply()`
- Calculate the annual absolute integrated anomaly for each site (`mutate`)
- Plot the annual absolute integrated anomaly for each site (`qplot`)

<div class="centered">

<script src="countdown.js" type="text/javascript"></script>
<script type="application/javascript">
var myCountdown1 = new Countdown({
    							time: 300, 
									width:150, 
									height:80, 
									rangeHi:"minute"	// <- no comma on last item!
									});

</script>

</div>





Feedback
===

[Feedback form](http://goo.gl/forms/3mH1UC0fH3)
http://goo.gl/forms/3mH1UC0fH3